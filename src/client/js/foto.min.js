class Foto {
    disableButtons(){
        document.getElementById("radius-range").value = 0,
        document.getElementById("radius-amount").value = 0,
        document.getElementById("flip-image").disabled = true,
        document.getElementById("rotate-image").disabled = true,
        document.getElementById("apply-border").disabled = true,
        document.getElementById("reset-image").disabled = true,
        document.getElementById("close-image").disabled = true,
        document.getElementById("makeGrayScale").disabled = true,
        document.getElementById("makeBright").disabled = true,
        document.getElementById("makeDark").disabled = true,
        document.getElementById("makeBlur").disabled = true,
        document.getElementById("makeEmboss").disabled = true,
        document.getElementById("makeSharp").disabled = true,
        document.getElementById("color-picker").disabled = true,
        document.getElementById("openColorpicker").disabled = true,
        document.getElementById("openColorizeColorPicker").disabled = true,
        document.getElementById("colorize-color-picker").disabled = true,
        document.getElementById("makeTransparent").disabled = true,
        document.getElementById("apply-border").style.opacity = "1",
        document.getElementById("blinker").style.animation= "blinker 0s linear infinite",
        document.getElementById("crop-image").className = "operation-btn-disabled",
        document.getElementById("flip-image").className = "operation-btn-disabled",
        document.getElementById("rotate-image").className = "operation-btn-disabled",
        document.getElementById("apply-border").className = "operation-btn-disabled",
        document.getElementById("reset-image").className = "operation-btn-disabled",
        document.getElementById("close-image").className = "operation-btn-disabled",
        document.getElementById("makeGrayScale").className = "operation-btn-disabled",
        document.getElementById("makeBright").className = "operation-btn-disabled",
        document.getElementById("makeDark").className = "operation-btn-disabled",
        document.getElementById("makeBlur").className = "operation-btn-disabled",
        document.getElementById("makeEmboss").className = "operation-btn-disabled",
        document.getElementById("makeSharp").className = "operation-btn-disabled",
        document.getElementById("color-picker").className = "operation-btn-disabled",
        document.getElementById("openColorpicker").className = "operation-btn-disabled",
        document.getElementById("openColorizeColorPicker").className = "operation-btn-disabled",
        document.getElementById("colorize-color-picker").className = "operation-btn-disabled",
        document.getElementById("makeTransparent").className = "operation-btn-disabled"
    }

    constructor() {
        var t = this;
        this.operationOrgCanvas = document.createElement("canvas"),
        this.operationOrgCtx = this.operationOrgCanvas.getContext("2d"),
        this.operationEditedCanvas = document.createElement("canvas"),
        this.operationEditedCtx = this.operationEditedCanvas.getContext("2d"),
        this.fileInput = document.getElementById("foto-file"),
        this.disableButtons(),
        this.fileInput.addEventListener("change", function(e) {
            t.loadImage()
        }),
        this.image = null,
        this.imageData = null,
        this.imageWidth = 0,
        this.imageHeight = 0,
        this.convertedToGrayScale = !1,
        this.previewImageElement = null,
        this.redPixelMatrix = [],
        this.greenPixelMatrix = [],
        this.bluePixelMatrix = [],
        this.alphaPixelMatrix = [],
        this.pickedR = "",
        this.pickedG = "",
        this.pickedB = "",
        this.selectedFileName = "",
        this.selectStart = !1,
        this.startX = "",
        this.startY = "",
        this.endX = "",
        this.endY = "",
        this.excludeArea = !1,
        this.relativeStartX = "",
        this.relativeStartY = "",
        this.relativeEndX = "",
        this.relativeEndY = "",
        this.pickedR = null,
        this.pickedG = null,
        this.pickedB = null,
        this.selectRect = document.createElement("div"),
        document.body.appendChild(this.selectRect),
        this.oldSelectedColorForColorize = null,
        this.ctrlPressed = !1;
        t = this;
        document.addEventListener("keydown", function(e) {
            17 == e.keyCode && (t.ctrlPressed = !0)
        }),
        document.addEventListener("keyup", function(e) {
            t.ctrlPressed = !0
        })
    }
    /*
    enableButtons(){
            document.getElementById("apply-border").disabled = false,
            document.getElementById("makeGrayScale").disabled = false,
            document.getElementById("makeBright").disabled = false,
            document.getElementById("makeDark").disabled = false,
            document.getElementById("makeDark").disabled = false,
            document.getElementById("makeBlur").disabled = false,
            document.getElementById("makeEmboss").disabled = false,
            document.getElementById("makeSharp").disabled = false,
            document.getElementById("color-picker").disabled = false,
            document.getElementById("openColorpicker").disabled = false,
            document.getElementById("colorize-color-picker").disabled = false,
            document.getElementById("makeTransparent").disabled = false,
            //////
            document.getElementById("apply-border").className = "operation-btn",
            document.getElementById("makeGrayScale").className = "operation-btn",
            document.getElementById("makeBright").className = "operation-btn",
            document.getElementById("makeDark").className = "operation-btn",
            document.getElementById("makeDark").className = "operation-btn",
            document.getElementById("makeBlur").className = "operation-btn",
            document.getElementById("makeEmboss").className = "operation-btn",
            document.getElementById("makeSharp").className = "operation-btn",
            document.getElementById("color-picker").className = "operation-btn",
            document.getElementById("openColorpicker").className = "operation-btn",
            document.getElementById("colorize-color-picker").className = "operation-btn",
            document.getElementById("makeTransparent").className = "operation-btn",

            //////
            document.getElementById("apply-border").style.opacity = "1",
            document.getElementById("blinker").style.animation= "blinker 2s linear infinite"

        }*/
    loadImage() {
        var t = document.getElementById("foto-file");
        this.selectedFileName = t.files.item(0).name;
        var e = new FileReader
          , a = this;
        e.onload = function(t) {
            a.image = new Image,
            a.image.onload = function() {
                a.imageWidth = a.image.width,
                a.imageHeight = a.image.height,
                a.operationOrgCanvas.width = a.imageWidth,
                a.operationOrgCanvas.height = a.imageHeight,
                a.operationEditedCanvas.width = a.imageWidth,
                a.operationEditedCanvas.height = a.imageHeight,
                a.imageData = [],
                a.operationOrgCtx.clearRect(0, 0, a.operationOrgCanvas.width, a.operationOrgCanvas.height),
                a.operationEditedCtx.clearRect(0, 0, a.operationEditedCanvas.width, a.operationEditedCanvas.height),
                a.operationOrgCtx.drawImage(a.image, 0, 0),
                a.operationEditedCtx.drawImage(a.image, 0, 0),
                a.previewImage(a.operationOrgCanvas, 0),
                a.imageData = a.operationOrgCtx.getImageData(0, 0, a.operationOrgCanvas.width, a.operationOrgCanvas.height),
                a.generatePixelPatrix(),
                /*
                document.getElementById("apply-border").disabled = false,
                document.getElementById("apply-border").style.opacity = "1",
                document.getElementById("apply-border").style.backgroundColor = "#201e1e",
                document.getElementById("blinker").style.animation= "blinker 2s linear infinite",
                */
                document.getElementById("crop-image").disabled = false,
                document.getElementById("flip-image").disabled = false,
                document.getElementById("rotate-image").disabled = false,
                document.getElementById("apply-border").disabled = false,
                document.getElementById("close-image").disabled = false,
                document.getElementById("reset-image").disabled = false,
                document.getElementById("makeGrayScale").disabled = false,
                document.getElementById("makeBright").disabled = false,
                document.getElementById("makeDark").disabled = false,
                document.getElementById("makeDark").disabled = false,
                document.getElementById("makeBlur").disabled = false,
                document.getElementById("makeEmboss").disabled = false,
                document.getElementById("makeSharp").disabled = false,
                document.getElementById("color-picker").disabled = false,
                document.getElementById("openColorpicker").disabled = false,
                document.getElementById("openColorizeColorPicker").disabled = false,
                document.getElementById("colorize-color-picker").disabled = false,
                document.getElementById("makeTransparent").disabled = false,
                document.getElementById("crop-image").className = "operation-btn",
                document.getElementById("flip-image").className = "operation-btn",
                document.getElementById("rotate-image").className = "operation-btn",
                document.getElementById("reset-image").className = "operation-btn",
                document.getElementById("close-image").className = "operation-btn",
                document.getElementById("apply-border").className = "operation-btn",
                document.getElementById("makeGrayScale").className = "operation-btn",
                document.getElementById("makeBright").className = "operation-btn",
                document.getElementById("makeDark").className = "operation-btn",
                document.getElementById("makeBlur").className = "operation-btn",
                document.getElementById("makeEmboss").className = "operation-btn",
                document.getElementById("makeSharp").className = "operation-btn",
                document.getElementById("color-picker").className = "operation-btn",
                document.getElementById("openColorpicker").className = "operation-btn",
                document.getElementById("openColorizeColorPicker").className = "operation-btn",
                document.getElementById("colorize-color-picker").className = "operation-btn",
                document.getElementById("makeTransparent").className = "operation-btn",
                //////
                document.getElementById("apply-border").style.opacity = "1",
                document.getElementById("blinker").style.animation= "blinker 2s linear infinite",
                console.log("Pixel Data Loaded")
            }
            ,
            a.image.src = t.target.result
        }
        ,
        e.readAsDataURL(t.files[0])
    }
    generatePixelPatrix() {
        var t = []
          , e = []
          , a = []
          , i = [];
        this.redPixelMatrix = [],
        this.greenPixelMatrix = [],
        this.bluePixelMatrix = [],
        this.alphaPixelMatrix = [];
        for (var s = 0; s < this.imageData.data.length; s += 4)
            s / 4 % this.imageWidth == 0 && (0 != s && (this.redPixelMatrix.push(t),
            this.greenPixelMatrix.push(e),
            this.bluePixelMatrix.push(a),
            this.alphaPixelMatrix.push(i)),
            t = [],
            e = [],
            a = [],
            i = []),
            t.push(this.imageData.data[s]),
            e.push(this.imageData.data[s + 1]),
            a.push(this.imageData.data[s + 2]),
            i.push(this.imageData.data[s + 3])
    }
    grayscale() {
        for (var t = this.imageData, e = 0; e < t.data.length; e += 4) {
            var a = t.data[e]
              , i = t.data[e + 1]
              , s = t.data[e + 2];
            t.data[e + 3];
            t.data[e] = (a + i + s) / 3,
            t.data[e + 1] = (a + i + s) / 3,
            t.data[e + 2] = (a + i + s) / 3
        }
        this.operationEditedCtx.putImageData(t, 0, 0),
        this.previewImage(),
        this.convertedToGrayScale = !this.convertedToGrayScale
    }
    makeBright() {
        for (var t = this.imageData, e = 0; e < t.data.length; e += 4) {
            var a = t.data[e]
              , i = t.data[e + 1]
              , s = t.data[e + 2]
              , r = t.data[e + 3];
            t.data[e] = a + 10,
            t.data[e + 1] = i + 10,
            t.data[e + 2] = s + 10,
            t.data[e + 3] = r
        }
        this.operationEditedCtx.putImageData(t, 0, 0),
        this.previewImage()
    }
    makeDark() {
        for (var t = this.imageData, e = 0; e < t.data.length; e += 4)
            t.data[e] -= 10,
            t.data[e + 1] -= 10,
            t.data[e + 2] -= 10,
            t.data[e + 3] -= 10;
        this.operationEditedCtx.putImageData(t, 0, 0),
        this.previewImage()
    }
    makeTransparent() {
        for (var t = this.imageData, e = 0; e < t.data.length; e += 4)
            Math.abs(t.data[e] - this.pickedR) < 30 && Math.abs(t.data[e + 1] - this.pickedG) < 30 && Math.abs(t.data[e + 2] - this.pickedB) < 30 && (t.data[e + 3] = 0);
        this.operationEditedCtx.putImageData(t, 0, 0),
        this.previewImage()
    }
    applyFilter(t) {
        for (var e = 0; e < this.imageData.data.length; e += 4) {
            var a = parseInt(e / 4 / this.imageWidth)
              , i = e / 4 % this.imageWidth;
            if (0 != a && 0 != i && a != this.imageHeight - 1 && i != this.imageWidth - 1) {
                for (var s = 0, r = 0, h = 0, o = 0, d = 0; d < 3; d++)
                    for (var n = 0; n < 3; n++)
                        null != this.redPixelMatrix[a + (d - 1)] && null != this.redPixelMatrix[a + (d - 1)][i + (n - 1)] && (s += t[d][n] * this.redPixelMatrix[a + (d - 1)][i + (n - 1)],
                        r += t[d][n] * this.greenPixelMatrix[a + (d - 1)][i + (n - 1)],
                        h += t[d][n] * this.bluePixelMatrix[a + (d - 1)][i + (n - 1)],
                        o += t[d][n] * this.alphaPixelMatrix[a + (d - 1)][i + (n - 1)]);
                this.convertedToGrayScale ? (this.imageData.data[e] = (s + r + h) / 3,
                this.imageData.data[e + 1] = (s + r + h) / 3,
                this.imageData.data[e + 2] = (s + r + h) / 3,
                this.imageData.data[e + 3] = o) : (this.imageData.data[e] = s,
                this.imageData.data[e + 1] = r,
                this.imageData.data[e + 2] = h,
                this.imageData.data[e + 3] = o)
            }
        }
        this.operationEditedCtx.putImageData(this.imageData, 0, 0),
        this.previewImage()
    }
    applyBlurFilter() {
        this.applyFilter([[1 / 9, 1 / 9, 1 / 9], [1 / 9, 1 / 9, 1 / 9], [1 / 9, 1 / 9, 1 / 9]])
    }
    applyEmbossFilter() {
        this.applyFilter([[-2, -1, 0], [-1, 1, 1], [0, 1, 2]])
    }
    applySharpFilter() {
        this.applyFilter([[0, -1, 0], [-1, 5, -1], [0, -1, 0]])
    }
    applyVintageFilter() {
        this.colorFilter("#0000ff"),
        this.colorFilter("#0000ff"),
        this.colorFilter("#ec8900")
    }
    applyCustom() {
        this.applyFilter([[-1, -1, -1], [2, 2, 2], [-1, -1, -1]])
    }
    flipVertically() {
        this.operationEditedCtx.translate(this.imageWidth, 0),
        this.operationEditedCtx.scale(-1, 1),
        this.operationEditedCtx.drawImage(this.image, 0, 0),
        this.operationOrgCtx.translate(this.imageWidth, 0),
        this.operationOrgCtx.scale(-1, 1),
        this.operationOrgCtx.drawImage(this.image, 0, 0),
        this.imageData = this.operationOrgCtx.getImageData(0, 0, this.operationOrgCanvas.width, this.operationOrgCanvas.height),
        this.generatePixelPatrix(),
        this.previewImage(),
        console.log("Here it is")
    }
    flipHorizontally() {
        this.operationEditedCtx.translate(0, this.imageHeight),
        this.operationEditedCtx.scale(1, -1),
        this.operationEditedCtx.drawImage(this.image, 0, 0),
        this.operationOrgCtx.translate(0, this.imageHeight),
        this.operationOrgCtx.scale(1, -1),
        this.operationOrgCtx.drawImage(this.image, 0, 0),
        this.imageData = this.operationOrgCtx.getImageData(0, 0, this.operationOrgCanvas.width, this.operationOrgCanvas.height),
        this.generatePixelPatrix(),
        this.previewImage()
    }
    rotate(t) {
        this.operationEditedCtx.clearRect(0, 0, this.operationEditedCanvas.width, this.operationEditedCanvas.height),
        this.operationEditedCtx.save(),
        this.operationEditedCtx.translate(this.operationEditedCanvas.width / 2, this.operationEditedCanvas.height / 2),
        this.operationEditedCtx.rotate(t * Math.PI / 180),
        this.operationEditedCtx.drawImage(this.image, -this.image.width / 2, -this.image.width / 2),
        this.operationEditedCtx.restore(),
        this.operationOrgCtx.clearRect(0, 0, this.operationOrgCanvas.width, this.operationOrgCanvas.height),
        this.operationOrgCtx.save(),
        this.operationOrgCtx.translate(this.operationOrgCanvas.width / 2, this.operationOrgCanvas.height / 2),
        this.operationOrgCtx.rotate(t * Math.PI / 180),
        this.operationOrgCtx.drawImage(this.image, -this.image.width / 2, -this.image.width / 2),
        this.operationOrgCtx.save(),
        this.imageData = this.operationOrgCtx.getImageData(0, 0, this.operationOrgCanvas.width, this.operationOrgCanvas.height),
        this.generatePixelPatrix(),
        this.previewImage()
    }
    export() {
        if (this.selectedFileName === ''){
            alert('Nothing to export!')
        } else {
            var t = document.createElement("a");
            t.download = this.selectedFileName + "-edited.png",
            t.href = this.operationEditedCanvas.toDataURL(),
            t.click()
        }
    }
    previewImage(t, e) {
        this.previewImageElement = document.getElementById("foto-image"),
        this.previewImageElement.setAttribute("draggable", !1);
        var a = this;
        null != e && 0 == e && (this.previewImageElement.addEventListener("mouseover", function(t) {
            document.getSelection().removeAllRanges(),
            this.style.cursor = "crosshair"
        }),
        this.previewImageElement.addEventListener("click", function(t) {
            document.getSelection().removeAllRanges(),
            a.ctrlPressed && a.pickColorPixel(t.layerX, t.layerY),
            a.selectStart = !1
        }),
        this.previewImageElement.addEventListener("mousedown", function(t) {
            document.getSelection().removeAllRanges(),
            a.selectStart = !0,
            a.startX = t.clientX,
            a.startY = t.clientY,
            a.relativeStartX = t.layerX,
            a.relativeStartY = t.layerY
        }),
        this.previewImageElement.addEventListener("mousemove", function(t) {
            /* Bug code starts here
            a.endX = t.clientX,
            a.endY = t.clientY,
            a.selectStart && (a.selectRect.style.position = "fixed",
            a.selectRect.style.display = "initial",
            a.selectRect.style.border = "2px dashed black",
            a.selectRect.style.top = a.startY + "px",
            a.selectRect.style.left = a.startX + "px",
            a.selectRect.style.height = a.endY - a.startY + "px",
            a.selectRect.style.width = a.selectRect.style.height,
            a.selectRect.style.borderRadius = document.getElementById("radius-amount").value+"px")
            Bug code ends here */
            // a.selectRect.style.width = a.endX - a.startX + "px"
            document.getSelection().removeAllRanges(),
            a.endX = t.clientX,
            a.endY = t.clientY,
            a.selectStart && (a.selectRect.style.position = "fixed",
            a.selectRect.style.display = "initial",
            a.selectRect.style.border = "2px dashed black",
            a.selectRect.style.top = a.startY + "px",
            a.selectRect.style.left = a.startX + "px",
            a.selectRect.style.height = a.endY - a.startY + "px",
            a.selectRect.style.width = a.selectRect.style.height,
            a.selectRect.style.borderRadius = document.getElementById("radius-amount").value+"px")
        }),
        this.previewImageElement.addEventListener("mouseup", function(t) {
            //document.getSelection().removeAllRanges(),
            a.relativeEndX = t.layerX,
            a.relativeEndY = t.layerY
            // a.selectStart = !1,
            // a.selectRect.style.height = "0px",
            // a.selectRect.style.width = "0px",
            // a.selectRect.style.display = "none"
            /*
            Bug codes starts here
            a.relativeEndX = t.layerX,
            a.relativeEndY = t.layerY,
            a.selectStart = !1,
            a.selectRect.style.height = a.endY - a.startY + "px",
            a.selectRect.style.width = a.selectRect.style.height
            Bug codes ends here
            */
            /*
            a.selectRect.style.height = "0px",
            a.selectRect.style.width = "0px",
            a.selectRect.style.display = "none"
            */
        }),
        this.selectRect.addEventListener("mouseup", function(t) {
            a.selectStart = !1,
            document.getElementById("body").click(),
           // document.getSelection().removeAllRanges(),
            console.log('mouseup')
        })),
        this.previewImageElement.src = null == t ? a.operationEditedCanvas.toDataURL() : t.toDataURL()
    }
    pickColorPixel(t, e) {
        var a = this.previewImageElement.width
          , i = this.previewImageElement.height
          , s = this.imageWidth / a
          , r = this.imageHeight / i
          , h = parseInt(this.relativeStartX * s)
          , o = parseInt(this.relativeStartY * r)
          , d = this.operationOrgCtx.getImageData(h, o, 1, 1).data;
        this.pickedR = d[0],
        this.pickedG = d[1],
        this.pickedB = d[2],
        this.pickedA = d[3],
        document.getElementById("color-preview").style.background = "rgb(" + this.pickedR + ", " + this.pickedG + ", " + this.pickedB + ")"
    }
    applyColorFilter(t) {
        for (var e = .5 * parseInt(t.substr(1, 2), 16), a = .5 * parseInt(t.substr(3, 2), 16), i = .5 * parseInt(t.substr(5, 2), 16), s = this.imageData, r = 0; r < s.data.length; r += 4)
            s.data[r] <= e && (s.data[r] = e),
            s.data[r + 1] <= a && (s.data[r + 1] = a),
            s.data[r + 2] <= i && (s.data[r + 2] = i);
        this.operationEditedCtx.putImageData(s, 0, 0),
        this.previewImage()
    }
    colorize(t) {
        var e = .5 * parseInt(t.substr(1, 2), 16)
          , a = .5 * parseInt(t.substr(3, 2), 16)
          , i = .5 * parseInt(t.substr(5, 2), 16);
        null != this.oldSelectedColorForColorize && (e = -parseInt(this.oldSelectedColorForColorize.substr(1, 2), 16) + e,
        a = -parseInt(this.oldSelectedColorForColorize.substr(3, 2), 16) + a,
        i = -parseInt(this.oldSelectedColorForColorize.substr(3, 2), 16) + i),
        this.oldSelectedColorForColorize = t;
        for (var s = this.imageData, r = 0; r < s.data.length; r += 4)
            s.data[r] += e,
            s.data[r + 1] += a,
            s.data[r + 2] += i;
        this.operationEditedCtx.putImageData(s, 0, 0),
        this.previewImage()
    }
    cropSelected() {
        var t = this.previewImageElement.width
          , e = this.previewImageElement.height
          , a = this.imageWidth / t
          , i = this.imageHeight / e
          , s = this.relativeStartX * a
          , r = this.relativeStartY * i
          , h = parseInt(parseInt(this.selectRect.style.width.replace(/\D/g, "")) * a)
          , o = parseInt(parseInt(this.selectRect.style.height.replace(/\D/g, "")) * i)
          , d = this.operationEditedCtx.getImageData(s, r, h, o)
          , n = this.operationOrgCtx.getImageData(s, r, h, o);
        this.operationEditedCtx.clearRect(0, 0, this.operationEditedCanvas.width, this.operationEditedCanvas.height),
        this.operationOrgCtx.clearRect(0, 0, this.operationOrgCtx.width, this.operationOrgCtx.height),
        this.operationEditedCanvas.width = h,
        this.operationEditedCanvas.height = o,
        this.operationOrgCanvas.width = h,
        this.operationOrgCanvas.height = o,
        this.operationEditedCtx.putImageData(d, 0, 0),
        this.operationOrgCtx.putImageData(n, 0, 0),
        this.imageWidth = h,
        this.imageHeight = o,
        this.imageData = this.operationOrgCtx.getImageData(0, 0, this.operationOrgCanvas.width, this.operationOrgCanvas.height),
        this.generatePixelPatrix(),
        this.selectRect.style.display = "none",
        this.previewImage()
    }
}
